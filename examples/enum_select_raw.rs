use std::fmt::{Display, Formatter};

use inquire::Select;

fn main() {
    let ans = Select::new("Currency:", Currency::VARIANTS.to_vec()).prompt();

    match ans {
        Ok(choice) => println!("{} is not a good choice.", choice),
        Err(_) => println!("There was an error, please try again"),
    }
}

#[derive(Debug, Copy, Clone)]
enum Currency {
    BRL,
    USD,
    CAD,
    EUR,
    GBP,
    BTC,
    LTC,
}

impl Currency {
    // could be generated by macro
    const VARIANTS: &'static [Currency] = &[
        Self::BRL,
        Self::USD,
        Self::CAD,
        Self::EUR,
        Self::GBP,
        Self::BTC,
        Self::LTC,
    ];
}

impl Display for Currency {
    fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
        write!(f, "{:?}", self)
    }
}
